<?php

namespace Staatic\Vendor;

use Staatic\Vendor\Composer\Autoload\ClassLoader;
use Staatic\Vendor\Composer\Autoload\ComposerStaticInit72f424bd68353b51d927e8da1befd9c2;
use Closure;
// autoload_real.php @generated by Composer
class ComposerAutoloaderInit72f424bd68353b51d927e8da1befd9c2
{
    private static $loader;
    public static function loadClassLoader($class)
    {
        if ('Staatic\\Vendor\\Composer\\Autoload\\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }
    /**
     * @return ClassLoader
     */
    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }
        require __DIR__ . '/platform_check.php';
        \spl_autoload_register(array('Staatic\\Vendor\\ComposerAutoloaderInit72f424bd68353b51d927e8da1befd9c2', 'loadClassLoader'), \true, \true);
        self::$loader = $loader = new ClassLoader(\dirname(__DIR__));
        \spl_autoload_unregister(array('Staatic\\Vendor\\ComposerAutoloaderInit72f424bd68353b51d927e8da1befd9c2', 'loadClassLoader'));
        require __DIR__ . '/autoload_static.php';
        \call_user_func(ComposerStaticInit72f424bd68353b51d927e8da1befd9c2::getInitializer($loader));
        $loader->setClassMapAuthoritative(\true);
        $loader->register(\true);
        $filesToLoad = ComposerStaticInit72f424bd68353b51d927e8da1befd9c2::$files;
        $requireFile = Closure::bind(static function ($fileIdentifier, $file) {
            if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
                $GLOBALS['__composer_autoload_files'][$fileIdentifier] = \true;
                require $file;
            }
        }, null, null);
        foreach ($filesToLoad as $fileIdentifier => $file) {
            $requireFile($fileIdentifier, $file);
        }
        return $loader;
    }
}
